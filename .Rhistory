cacheSolve  <- function(x) {
m <- x$getInverse()	# fetches cached value for inverse
if(!is.null(m)) {		# checks if inverse was already calculated
message("getting cached data")
return(m)
}
data <- x$get()	 # Otherwise, it calculates Inverse of matrix and
m <- solve(data) 	 # sets the value of Inverse in cache
x$setInverse(m)
m
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y			# set the value of the Matrix
m <<- NULL		# clear the cache
}
get <- function() x
setInverse <- function(Inverse) m <<- Inverse	# set the value of Inverse
getInverse <- function() m	# get the value of Inverse
list(set = set, get = get,		# return a list with above four functions
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y			# set the value of the Matrix
m <<- NULL		# clear the cache
}
get <- function() x
setInverse <- function(Inverse) m <<- Inverse	# set the value of Inverse
getInverse <- function() m	# get the value of Inverse
list(set = set, get = get,		# return a list with above four functions
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y			# set the value of the Matrix
m <<- NULL		# clear the cache
}
get <- function() x
setInverse <- function(Inverse) m <<- Inverse	# set the value of Inverse
getInverse <- function() m	# get the value of Inverse
list(set = set, get = get,		# return a list with above four functions
setInverse = setInverse,
getInverse = getInverse)
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
